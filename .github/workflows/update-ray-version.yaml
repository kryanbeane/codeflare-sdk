name: Update Ray Version

on:
  workflow_dispatch:
    inputs:
      new_ray_version:
        description: 'New Ray version (e.g., 2.48.0) - Leave empty to skip'
        required: false
        type: string
        default: ''
      new_cuda_py311_sha:
        description: 'New CUDA Python 3.11 runtime image SHA (e.g., abc123...) - Leave empty to skip'
        required: false
        type: string
        default: ''
      new_cuda_py312_sha:
        description: 'New CUDA Python 3.12 runtime image SHA (e.g., def456...) - Leave empty to skip'
        required: false
        type: string
        default: ''
      new_cuda_version_py311:
        description: 'New CUDA version for Python 3.11 (e.g., cu121) - Leave empty to skip'
        required: false
        type: string
        default: ''
      new_cuda_version_py312:
        description: 'New CUDA version for Python 3.12 (e.g., cu128) - Leave empty to skip'
        required: false
        type: string
        default: ''

env:
  PR_BRANCH_NAME: ray-version-update-${{ github.run_id }}

jobs:
  update-ray-version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Configure git and create branch
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git checkout main
          git pull origin main
          git checkout -b ${{ env.PR_BRANCH_NAME }}

      - name: Update constants.py
        run: |
          echo "Updating constants.py with provided parameters..."

          # Update Ray version if provided
          if [ -n "${{ github.event.inputs.new_ray_version }}" ]; then
            echo "Updating Ray version to ${{ github.event.inputs.new_ray_version }}"
            sed -i "s/RAY_VERSION = \"[^\"]*\"/RAY_VERSION = \"${{ github.event.inputs.new_ray_version }}\"/" src/codeflare_sdk/common/utils/constants.py

            # Update comments with new Ray version and CUDA versions if both are provided
            if [ -n "${{ github.event.inputs.new_cuda_version_py311 }}" ]; then
              sed -i "s/\* For python 3.11:ray:[^\"]*/\* For python 3.11:ray:${{ github.event.inputs.new_ray_version }}-py311-${{ github.event.inputs.new_cuda_version_py311 }}/" src/codeflare_sdk/common/utils/constants.py
            fi
            if [ -n "${{ github.event.inputs.new_cuda_version_py312 }}" ]; then
              sed -i "s/\* For python 3.12:ray:[^\"]*/\* For python 3.12:ray:${{ github.event.inputs.new_ray_version }}-py312-${{ github.event.inputs.new_cuda_version_py312 }}/" src/codeflare_sdk/common/utils/constants.py
            fi
          fi

          # Update runtime image SHAs if provided
          if [ -n "${{ github.event.inputs.new_cuda_py311_sha }}" ]; then
            echo "Updating Python 3.11 runtime image SHA"
            sed -i "s/CUDA_PY311_RUNTIME_IMAGE = \"quay\.io\/modh\/ray@sha256:[^\"]*\"/CUDA_PY311_RUNTIME_IMAGE = \"quay.io\/modh\/ray@sha256:${{ github.event.inputs.new_cuda_py311_sha }}\"/" src/codeflare_sdk/common/utils/constants.py
          fi

          if [ -n "${{ github.event.inputs.new_cuda_py312_sha }}" ]; then
            echo "Updating Python 3.12 runtime image SHA"
            sed -i "s/CUDA_PY312_RUNTIME_IMAGE = \"quay\.io\/modh\/ray@sha256:[^\"]*\"/CUDA_PY312_RUNTIME_IMAGE = \"quay.io\/modh\/ray@sha256:${{ github.event.inputs.new_cuda_py312_sha }}\"/" src/codeflare_sdk/common/utils/constants.py
          fi

          echo "Constants.py update completed"

      - name: Update pyproject.toml
        run: |
          # Update Ray dependency version in pyproject.toml if Ray version is provided
          if [ -n "${{ github.event.inputs.new_ray_version }}" ]; then
            echo "Updating pyproject.toml with Ray version ${{ github.event.inputs.new_ray_version }}"
            sed -i "s/ray = {version = \"[^\"]*\", extras = \[\"data\", \"default\"\]}/ray = {version = \"${{ github.event.inputs.new_ray_version }}\", extras = [\"data\", \"default\"]}/" pyproject.toml
            echo "pyproject.toml updated successfully"
          else
            echo "Skipping pyproject.toml update - no Ray version provided"
          fi

      - name: Update documentation files
        run: |
          # Update documentation files with new Ray version and image tags if provided
          if [ -n "${{ github.event.inputs.new_ray_version }}" ] && [ -n "${{ github.event.inputs.new_cuda_version_py311 }}" ]; then
            echo "Updating documentation files with Ray ${{ github.event.inputs.new_ray_version }} and CUDA ${{ github.event.inputs.new_cuda_version_py311 }}"
            find docs/ -name "*.rst" -exec sed -i "s/quay\.io\/modh\/ray:[0-9]\+\.[0-9]\+\.[0-9]\+-py311-cu[0-9]\+/quay.io\/modh\/ray:${{ github.event.inputs.new_ray_version }}-py311-${{ github.event.inputs.new_cuda_version_py311 }}/g" {} \;
            find docs/ -name "*.rst" -exec sed -i "s/quay\.io\/modh\/ray:[0-9]\+\.[0-9]\+\.[0-9]\+-py311-rocm[0-9]\+/quay.io\/modh\/ray:${{ github.event.inputs.new_ray_version }}-py311-rocm62/g" {} \;
          fi

          if [ -n "${{ github.event.inputs.new_ray_version }}" ] && [ -n "${{ github.event.inputs.new_cuda_version_py312 }}" ]; then
            echo "Updating documentation files with Ray ${{ github.event.inputs.new_ray_version }} and CUDA ${{ github.event.inputs.new_cuda_version_py312 }}"
            find docs/ -name "*.rst" -exec sed -i "s/quay\.io\/modh\/ray:[0-9]\+\.[0-9]\+\.[0-9]\+-py312-cu[0-9]\+/quay.io\/modh\/ray:${{ github.event.inputs.new_ray_version }}-py312-${{ github.event.inputs.new_cuda_version_py312 }}/g" {} \;
          fi

      - name: Update notebook files
        run: |
          # Update notebook files with new Ray version and image tags if provided
          if [ -n "${{ github.event.inputs.new_ray_version }}" ] && [ -n "${{ github.event.inputs.new_cuda_version_py311 }}" ]; then
            echo "Updating notebook files with Ray ${{ github.event.inputs.new_ray_version }} and CUDA ${{ github.event.inputs.new_cuda_version_py311 }}"
            find demo-notebooks/ -name "*.ipynb" -exec sed -i "s/quay\.io\/modh\/ray:[0-9]\+\.[0-9]\+\.[0-9]\+-py311-cu[0-9]\+/quay.io\/modh\/ray:${{ github.event.inputs.new_ray_version }}-py311-${{ github.event.inputs.new_cuda_version_py311 }}/g" {} \;
          fi

          if [ -n "${{ github.event.inputs.new_ray_version }}" ] && [ -n "${{ github.event.inputs.new_cuda_version_py312 }}" ]; then
            echo "Updating notebook files with Ray ${{ github.event.inputs.new_ray_version }} and CUDA ${{ github.event.inputs.new_cuda_version_py312 }}"
            find demo-notebooks/ -name "*.ipynb" -exec sed -i "s/quay\.io\/modh\/ray:[0-9]\+\.[0-9]\+\.[0-9]\+-py312-cu[0-9]\+/quay.io\/modh\/ray:${{ github.event.inputs.new_ray_version }}-py312-${{ github.event.inputs.new_cuda_version_py312 }}/g" {} \;
          fi

      - name: Update YAML test files
        run: |
          # Update YAML files with new Ray version if provided
          if [ -n "${{ github.event.inputs.new_ray_version }}" ]; then
            echo "Updating YAML test files with Ray version ${{ github.event.inputs.new_ray_version }}"
            find tests/ -name "*.yaml" -exec sed -i "s/rayVersion: [0-9]\+\.[0-9]\+\.[0-9]\+/rayVersion: ${{ github.event.inputs.new_ray_version }}/g" {} \;
          fi

          # Update image tags in YAML files if Ray version and CUDA versions are provided
          if [ -n "${{ github.event.inputs.new_ray_version }}" ] && [ -n "${{ github.event.inputs.new_cuda_version_py311 }}" ]; then
            find tests/ -name "*.yaml" -exec sed -i "s/quay\.io\/modh\/ray:[0-9]\+\.[0-9]\+\.[0-9]\+-py311-cu[0-9]\+/quay.io\/modh\/ray:${{ github.event.inputs.new_ray_version }}-py311-${{ github.event.inputs.new_cuda_version_py311 }}/g" {} \;
          fi

      - name: Update output YAML files
        run: |
          # Update output YAML files in demo-notebooks if Ray version and CUDA version are provided
          if [ -n "${{ github.event.inputs.new_ray_version }}" ] && [ -n "${{ github.event.inputs.new_cuda_version_py311 }}" ]; then
            echo "Updating output YAML files with Ray ${{ github.event.inputs.new_ray_version }} and CUDA ${{ github.event.inputs.new_cuda_version_py311 }}"
            find demo-notebooks/ -name "*.yaml" -exec sed -i "s/quay\.io\/modh\/ray:[0-9]\+\.[0-9]\+\.[0-9]\+-py311-cu[0-9]\+/quay.io\/modh\/ray:${{ github.event.inputs.new_ray_version }}-py311-${{ github.event.inputs.new_cuda_version_py311 }}/g" {} \;
          fi

      - name: Validate updates
        run: |
          echo "Validating updates..."

          # Check if constants.py was updated correctly (only if Ray version was provided)
          if [ -n "${{ github.event.inputs.new_ray_version }}" ]; then
            if grep -q "RAY_VERSION = \"${{ github.event.inputs.new_ray_version }}\"" src/codeflare_sdk/common/utils/constants.py; then
              echo "✓ Ray version updated in constants.py"
            else
              echo "✗ Ray version not found in constants.py"
              exit 1
            fi

            # Check if pyproject.toml was updated correctly
            if grep -q "ray = {version = \"${{ github.event.inputs.new_ray_version }}\"" pyproject.toml; then
              echo "✓ Ray version updated in pyproject.toml"
            else
              echo "✗ Ray version not found in pyproject.toml"
              exit 1
            fi
          fi

          # Check if runtime images were updated (only if SHAs were provided)
          if [ -n "${{ github.event.inputs.new_cuda_py311_sha }}" ]; then
            if grep -q "quay.io/modh/ray@sha256:${{ github.event.inputs.new_cuda_py311_sha }}" src/codeflare_sdk/common/utils/constants.py; then
              echo "✓ Python 3.11 runtime image updated"
            else
              echo "✗ Python 3.11 runtime image not found"
              exit 1
            fi
          fi

          if [ -n "${{ github.event.inputs.new_cuda_py312_sha }}" ]; then
            if grep -q "quay.io/modh/ray@sha256:${{ github.event.inputs.new_cuda_py312_sha }}" src/codeflare_sdk/common/utils/constants.py; then
              echo "✓ Python 3.12 runtime image updated"
            else
              echo "✗ Python 3.12 runtime image not found"
              exit 1
            fi
          fi

          echo "All validations passed!"

      - name: Check for changes
        id: check-changes
        run: |
          if git diff --quiet; then
            echo "No changes detected"
            echo "has-changes=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected"
            echo "has-changes=true" >> $GITHUB_OUTPUT
            echo "Summary of changes:"
            git diff --stat
          fi

      - name: Commit changes
        if: steps.check-changes.outputs.has-changes == 'true'
        run: |
          git add .

          # Build commit message based on what was updated
          COMMIT_MSG="Update Ray configuration"

          if [ -n "${{ github.event.inputs.new_ray_version }}" ]; then
            COMMIT_MSG="$COMMIT_MSG

          - Updated Ray version to ${{ github.event.inputs.new_ray_version }} in constants.py and pyproject.toml"
          fi

          if [ -n "${{ github.event.inputs.new_cuda_py311_sha }}" ]; then
            COMMIT_MSG="$COMMIT_MSG
          - Updated Python 3.11 CUDA runtime image SHA"
          fi

          if [ -n "${{ github.event.inputs.new_cuda_py312_sha }}" ]; then
            COMMIT_MSG="$COMMIT_MSG
          - Updated Python 3.12 CUDA runtime image SHA"
          fi

          if [ -n "${{ github.event.inputs.new_cuda_version_py311 }}" ] || [ -n "${{ github.event.inputs.new_cuda_version_py312 }}" ]; then
            COMMIT_MSG="$COMMIT_MSG
          - Updated documentation and notebook files with new CUDA versions"
          fi

          COMMIT_MSG="$COMMIT_MSG

          Parameters provided:
          - Ray version: ${{ github.event.inputs.new_ray_version }}
          - Python 3.11 CUDA version: ${{ github.event.inputs.new_cuda_version_py311 }}
          - Python 3.12 CUDA version: ${{ github.event.inputs.new_cuda_version_py312 }}
          - Python 3.11 runtime SHA: ${{ github.event.inputs.new_cuda_py311_sha }}
          - Python 3.12 runtime SHA: ${{ github.event.inputs.new_cuda_py312_sha }}"

          git commit -m "$COMMIT_MSG"

      - name: Push changes
        if: steps.check-changes.outputs.has-changes == 'true'
        run: |
          git push origin ${{ env.PR_BRANCH_NAME }}

      - name: Create Pull Request
        if: steps.check-changes.outputs.has-changes == 'true'
        run: |
          # Build PR title and body based on what was updated
          PR_TITLE="Update Ray configuration"
          if [ -n "${{ github.event.inputs.new_ray_version }}" ]; then
            PR_TITLE="Update Ray version to ${{ github.event.inputs.new_ray_version }}"
          fi

          PR_BODY="## Ray Configuration Update

          This PR automatically updates Ray configuration across the repository.

          ### Changes Made:"

          if [ -n "${{ github.event.inputs.new_ray_version }}" ]; then
            PR_BODY="$PR_BODY
          - **Ray Version**: Updated to \`${{ github.event.inputs.new_ray_version }}\`"
          fi

          if [ -n "${{ github.event.inputs.new_cuda_version_py311 }}" ]; then
            PR_BODY="$PR_BODY
          - **Python 3.11 CUDA Version**: \`${{ github.event.inputs.new_cuda_version_py311 }}\`"
          fi

          if [ -n "${{ github.event.inputs.new_cuda_version_py312 }}" ]; then
            PR_BODY="$PR_BODY
          - **Python 3.12 CUDA Version**: \`${{ github.event.inputs.new_cuda_version_py312 }}\`"
          fi

          if [ -n "${{ github.event.inputs.new_cuda_py311_sha }}" ]; then
            PR_BODY="$PR_BODY
          - **Python 3.11 Runtime SHA**: \`${{ github.event.inputs.new_cuda_py311_sha }}\`"
          fi

          if [ -n "${{ github.event.inputs.new_cuda_py312_sha }}" ]; then
            PR_BODY="$PR_BODY
          - **Python 3.12 Runtime SHA**: \`${{ github.event.inputs.new_cuda_py312_sha }}\`"
          fi

          PR_BODY="$PR_BODY

          ### Files Updated:
          - \`src/codeflare_sdk/common/utils/constants.py\` - Ray version, comments, and runtime image SHAs
          - \`pyproject.toml\` - Ray dependency version (if Ray version provided)
          - Documentation files (\`.rst\`) - Updated Ray image tags (if versions provided)
          - Notebook files (\`.ipynb\`) - Updated Ray image tags (if versions provided)
          - YAML test files - Updated Ray version and image tags (if versions provided)

          ### Testing:
          Please run the test suite to ensure all changes work correctly:
          \`\`\`bash
          poetry install
          poetry run pytest
          \`\`\`

          ### Review Checklist:
          - [ ] Verify Ray version is correctly updated in all files
          - [ ] Check that runtime image SHAs are valid
          - [ ] Ensure documentation examples are updated
          - [ ] Run tests to verify compatibility"

          # Create PR using GitHub CLI
          gh pr create \
            --title "$PR_TITLE" \
            --body "$PR_BODY" \
            --base main \
            --head ${{ env.PR_BRANCH_NAME }} \
            --label "automated,ray-version-update"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment on workflow run
        if: steps.check-changes.outputs.has-changes == 'false'
        run: |
          echo "No changes were made. This could mean:"
          echo "1. The Ray version is already up to date"
          echo "2. The input parameters didn't match any existing patterns"
          echo "3. There was an issue with the update process"
          echo ""
          echo "Please verify the input parameters and try again."
